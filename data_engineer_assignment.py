# -*- coding: utf-8 -*-
"""Data Engineer Assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FhDg6ZNIuifuK3r5U2HBfcSbaS649ax0

**Name - Rishita Chauhan**

**Phone - 9711944870**

**LinkedIn - https://www.linkedin.com/in/rishita-chauhan-685b771a6/**
"""

import pandas as pd
import numpy as np
import re
import nltk
import warnings
import seaborn as s
import matplotlib.pyplot as plt
warnings.filterwarnings('ignore')
nltk.download('punkt')

# data = pd.read_csv(r"E:\Downloads\2022_02_08-02_30_31_AM.csv")
from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv('/content/drive/MyDrive/assign/2022_02_08-02_30_31_AM.csv')

data

"""**Dropping duplicates**"""

data.drop_duplicates(inplace = True)
data

"""### 1. Products without prices"""

data.isnull().sum()

"""There are 822 products with no price (Nan values in price string)"""

no_price = data[data['price_string'].isnull()&data['price_string_unf'].isnull()]
no_price

"""There are 815 such products for which both 'price_string' and 'price_string_unf' are null. Hence, there are 815 products for which prices are not specified.

### 2. Count of products without prices and with prices in each Product Type, Category, Level 1
"""

product_with_prices = data[data['price_string'].notnull() | data['price_string_unf'].notnull()]
product_with_prices

plt.rcParams['figure.figsize']=(20,10)
ax = s.countplot(product_with_prices['category'],palette='prism')
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha="right")
plt.tight_layout()
plt.title('Categories with product prices',fontsize=25)
plt.show()

"""**Count of products with prices in each Product Type, Category, Level 1**"""

level1_with_prices = product_with_prices[['level_1','uuid']].groupby(['level_1']).count()
category_with_prices = product_with_prices[['category','uuid']].groupby(['category']).count()
productType_with_prices = product_with_prices[['product_type','uuid']].groupby(['product_type']).count()
display(level1_with_prices)
display(category_with_prices)
display(productType_with_prices)

product_without_prices = data[data['price_string'].isnull() & data['price_string_unf'].isnull()]
product_without_prices

plt.rcParams['figure.figsize']=(20,10)
ax = s.countplot(product_without_prices['category'],palette='prism')
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha="right")
plt.tight_layout()
plt.title('Category without product prices',fontsize=25)
plt.show()

"""**Count of products without prices in each Product Type, Category, Level 1**"""

level1_without_prices = product_without_prices[['level_1','uuid']].groupby(['level_1']).count()
category_without_prices = product_without_prices[['category','uuid']].groupby(['category']).count()
productType_without_prices = product_without_prices[['product_type','uuid']].groupby(['product_type']).count()
display(level1_without_prices)
display(category_without_prices)
display(productType_without_prices)

"""**Count of products without prices and with prices in each Product Type, Category, Level 1**"""

level1 = pd.concat([level1_with_prices, level1_without_prices], axis=1, join="outer", ignore_index=True)
category = pd.concat([category_with_prices, category_without_prices], axis=1, join="outer", ignore_index=True)
productType = pd.concat([productType_with_prices, productType_without_prices], axis=1, join="outer", ignore_index=True)
productType = productType.fillna(0)
category = category.fillna(0)
level1 = level1.fillna(0)
level1.rename(columns = {0:'count_with_prices', 1: 'count_without_prices'}, inplace = True)
category.rename(columns = {0:'count_with_prices', 1: 'count_without_prices'}, inplace = True)
productType.rename(columns = {0:'count_with_prices', 1: 'count_without_prices'}, inplace = True)
l = [level1,category,productType]
for i in l:
  i['count_with_prices'] = i['count_with_prices'].astype(int)
  i['count_without_prices'] = i['count_without_prices'].astype(int)

for i in l:
  display(i)

"""3. Correct Product Prices in the correct format (eg: $56) wherever possible and separate them into currency and value columns."""

data.dropna(subset=['price_string', 'price_string_unf'], how='all', inplace=True)
data

"""**Flitering Unfiltered price string**"""

required_infiltered_data = data[data['price_string'].isnull()]
required_infiltered_data

required_infiltered_data['price_string_unf'] = required_infiltered_data.apply(lambda row: nltk.word_tokenize(row['price_string_unf']), axis=1)
required_infiltered_data

def filter_d(text):
    tokens = ""
    for i in text:
      if check_float(i):
        tokens = i
        break
    if len(tokens)!=0:
      tokens= "$" + tokens
    return tokens

def check_float(text):
  res = text.replace('.', '', 1).isdigit()
  return res

required_infiltered_data['price_string']= required_infiltered_data['price_string_unf'].apply(lambda x: filter_d(x))
required_infiltered_data

data.update(required_infiltered_data)
data

"""**Formatting filtered price string**"""

data['price_string'].unique()

def format_string(text):
  if text!="":
    if not text.startswith("$"):
      text= text.strip()
      text = "$" + text
  return text

data['price_string'] = data['price_string'].fillna("")
data = data.astype({"price_string": str})
data['price_string']= data['price_string'].apply(lambda x: format_string(x))
data

def tokenization(text):
    tokens = []
    if text!="":
      text = text.strip()
      if text.startswith("$"):
        tokens = ["$",text[1:].strip()]
      else:
        tokens = [np.nan,text]
    else:
      tockens = [np.nan,np.nan]
    return tokens

data['price_tockenized']= data['price_string'].apply(lambda x: tokenization(x))
data

"""**Seperating prize and currency into columns**"""

data[['Currency','Price']] = pd.DataFrame(data["price_tockenized"].tolist(), index= data.index)
data.drop('price_tockenized',inplace=True,axis=1)
data

data['Price'].describe()

plt.rcParams['figure.figsize']=(15,7)
ax = s.histplot(data=data, x="Price", color = 'red')
plt.title('Histogram',fontsize=25)
plt.tight_layout()
plt.show()

plt.figure(figsize=(20,5))
s.violinplot(x='Price',data=data, color = 'purple')
plt.title('Price',fontsize=25)
plt.show()

"""4. List out the categories with average price of product."""

data.info()

data['Price'] = data['Price'].astype(float)
data.info()

answer = data[['category','Price']].groupby(['category']).mean()
display(answer)

plt.rcParams['figure.figsize']=(20,10)
ax = s.barplot(x = data['category'],y = data['Price'],data = data, palette='Set2')
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")
plt.title('Product Category vs Average Price',fontsize=25)
plt.tight_layout()
plt.show()